// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthProtocol.proto

#include "AuthProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AuthProtocol {
PROTOBUF_CONSTEXPR CreateAccountWeb::CreateAccountWeb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/int64_t{0}} {}
struct CreateAccountWebDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAccountWebDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAccountWebDefaultTypeInternal() {}
  union {
    CreateAccountWeb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
PROTOBUF_CONSTEXPR CreateAccountWebSuccess::CreateAccountWebSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requestid_)*/int64_t{0}
  , /*decltype(_impl_.userid_)*/int64_t{0}} {}
struct CreateAccountWebSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAccountWebSuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAccountWebSuccessDefaultTypeInternal() {}
  union {
    CreateAccountWebSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
PROTOBUF_CONSTEXPR CreateAccountWebFailure::CreateAccountWebFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fail_reason_)*/{}
  , /*decltype(_impl_.requestid_)*/int64_t{0}} {}
struct CreateAccountWebFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAccountWebFailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAccountWebFailureDefaultTypeInternal() {}
  union {
    CreateAccountWebFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
PROTOBUF_CONSTEXPR AuthenticateWeb::AuthenticateWeb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/int64_t{0}} {}
struct AuthenticateWebDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticateWebDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticateWebDefaultTypeInternal() {}
  union {
    AuthenticateWeb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
PROTOBUF_CONSTEXPR AuthenticateWebSuccess::AuthenticateWebSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creationdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestid_)*/int64_t{0}
  , /*decltype(_impl_.userid_)*/int64_t{0}} {}
struct AuthenticateWebSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticateWebSuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticateWebSuccessDefaultTypeInternal() {}
  union {
    AuthenticateWebSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
PROTOBUF_CONSTEXPR AuthenticateWebFailure::AuthenticateWebFailure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fail_reason_)*/{}
  , /*decltype(_impl_.requestid_)*/int64_t{0}} {}
struct AuthenticateWebFailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticateWebFailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticateWebFailureDefaultTypeInternal() {}
  union {
    AuthenticateWebFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
}  // namespace AuthProtocol
static ::_pb::Metadata file_level_metadata_AuthProtocol_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_AuthProtocol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AuthProtocol_2eproto = nullptr;

const uint32_t TableStruct_AuthProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWeb, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWeb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWeb, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWeb, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWeb, _impl_.passwd_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebSuccess, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebSuccess, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebSuccess, _impl_.userid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebFailure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebFailure, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::CreateAccountWebFailure, _impl_.fail_reason_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWeb, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWeb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWeb, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWeb, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWeb, _impl_.passwd_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebSuccess, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebSuccess, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebSuccess, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebSuccess, _impl_.creationdate_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebFailure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebFailure, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::AuthProtocol::AuthenticateWebFailure, _impl_.fail_reason_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::AuthProtocol::CreateAccountWeb)},
  { 12, 20, -1, sizeof(::AuthProtocol::CreateAccountWebSuccess)},
  { 22, 30, -1, sizeof(::AuthProtocol::CreateAccountWebFailure)},
  { 32, 41, -1, sizeof(::AuthProtocol::AuthenticateWeb)},
  { 44, 53, -1, sizeof(::AuthProtocol::AuthenticateWebSuccess)},
  { 56, 64, -1, sizeof(::AuthProtocol::AuthenticateWebFailure)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AuthProtocol::_CreateAccountWeb_default_instance_._instance,
  &::AuthProtocol::_CreateAccountWebSuccess_default_instance_._instance,
  &::AuthProtocol::_CreateAccountWebFailure_default_instance_._instance,
  &::AuthProtocol::_AuthenticateWeb_default_instance_._instance,
  &::AuthProtocol::_AuthenticateWebSuccess_default_instance_._instance,
  &::AuthProtocol::_AuthenticateWebFailure_default_instance_._instance,
};

const char descriptor_table_protodef_AuthProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022AuthProtocol.proto\022\014AuthProtocol\"D\n\020Cr"
  "eateAccountWeb\022\021\n\trequestID\030\001 \002(\003\022\r\n\005ema"
  "il\030\002 \002(\t\022\016\n\006passwd\030\003 \002(\t\"<\n\027CreateAccoun"
  "tWebSuccess\022\021\n\trequestID\030\001 \002(\003\022\016\n\006userID"
  "\030\002 \002(\003\"\306\001\n\027CreateAccountWebFailure\022\021\n\tre"
  "questId\030\001 \002(\003\022A\n\013Fail_reason\030\002 \003(\0162,.Aut"
  "hProtocol.CreateAccountWebFailure.reason"
  "\"U\n\006reason\022\032\n\026ACCOUNT_ALREADY_EXISTS\020\000\022\024"
  "\n\020INVALID_PASSWORD\020\001\022\031\n\025INTERNAL_SERVER_"
  "ERROR\020\002\"C\n\017AuthenticateWeb\022\021\n\trequestId\030"
  "\001 \002(\003\022\r\n\005email\030\002 \002(\t\022\016\n\006passwd\030\003 \002(\t\"Q\n\026"
  "AuthenticateWebSuccess\022\021\n\trequestId\030\001 \002("
  "\003\022\016\n\006userId\030\002 \002(\003\022\024\n\014creationDate\030\003 \002(\t\""
  "\253\001\n\026AuthenticateWebFailure\022\021\n\trequestId\030"
  "\001 \002(\003\022@\n\013Fail_reason\030\002 \003(\0162+.AuthProtoco"
  "l.AuthenticateWebFailure.reason\"<\n\006reaso"
  "n\022\027\n\023INVALID_CREDENTIALS\020\000\022\031\n\025INTERNAL_S"
  "ERVER_ERROR\020\001"
  ;
static ::_pbi::once_flag descriptor_table_AuthProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AuthProtocol_2eproto = {
    false, false, 693, descriptor_table_protodef_AuthProtocol_2eproto,
    "AuthProtocol.proto",
    &descriptor_table_AuthProtocol_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_AuthProtocol_2eproto::offsets,
    file_level_metadata_AuthProtocol_2eproto, file_level_enum_descriptors_AuthProtocol_2eproto,
    file_level_service_descriptors_AuthProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AuthProtocol_2eproto_getter() {
  return &descriptor_table_AuthProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AuthProtocol_2eproto(&descriptor_table_AuthProtocol_2eproto);
namespace AuthProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFailure_reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AuthProtocol_2eproto);
  return file_level_enum_descriptors_AuthProtocol_2eproto[0];
}
bool CreateAccountWebFailure_reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure::ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure::INVALID_PASSWORD;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure::INTERNAL_SERVER_ERROR;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure::reason_MIN;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure::reason_MAX;
constexpr int CreateAccountWebFailure::reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFailure_reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AuthProtocol_2eproto);
  return file_level_enum_descriptors_AuthProtocol_2eproto[1];
}
bool AuthenticateWebFailure_reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure::INVALID_CREDENTIALS;
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure::INTERNAL_SERVER_ERROR;
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure::reason_MIN;
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure::reason_MAX;
constexpr int AuthenticateWebFailure::reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CreateAccountWeb::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountWeb>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CreateAccountWeb::CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.CreateAccountWeb)
}
CreateAccountWeb::CreateAccountWeb(const CreateAccountWeb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAccountWeb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passwd()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.CreateAccountWeb)
}

inline void CreateAccountWeb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.requestid_){int64_t{0}}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAccountWeb::~CreateAccountWeb() {
  // @@protoc_insertion_point(destructor:AuthProtocol.CreateAccountWeb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAccountWeb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.passwd_.Destroy();
}

void CreateAccountWeb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAccountWeb::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.CreateAccountWeb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.passwd_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountWeb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthProtocol.CreateAccountWeb.email");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthProtocol.CreateAccountWeb.passwd");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountWeb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.CreateAccountWeb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthProtocol.CreateAccountWeb.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string passwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthProtocol.CreateAccountWeb.passwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.CreateAccountWeb)
  return target;
}

size_t CreateAccountWeb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthProtocol.CreateAccountWeb)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_passwd()) {
    // required string passwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  if (_internal_has_requestid()) {
    // required int64 requestID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t CreateAccountWeb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.CreateAccountWeb)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string passwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());

    // required int64 requestID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountWeb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAccountWeb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountWeb::GetClassData() const { return &_class_data_; }


void CreateAccountWeb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAccountWeb*>(&to_msg);
  auto& from = static_cast<const CreateAccountWeb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.CreateAccountWeb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_passwd(from._internal_passwd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountWeb::CopyFrom(const CreateAccountWeb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.CreateAccountWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountWeb::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateAccountWeb::InternalSwap(CreateAccountWeb* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountWeb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[0]);
}

// ===================================================================

class CreateAccountWebSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountWebSuccess>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CreateAccountWebSuccess::CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.CreateAccountWebSuccess)
}
CreateAccountWebSuccess::CreateAccountWebSuccess(const CreateAccountWebSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAccountWebSuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.userid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.userid_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.userid_));
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.CreateAccountWebSuccess)
}

inline void CreateAccountWebSuccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requestid_){int64_t{0}}
    , decltype(_impl_.userid_){int64_t{0}}
  };
}

CreateAccountWebSuccess::~CreateAccountWebSuccess() {
  // @@protoc_insertion_point(destructor:AuthProtocol.CreateAccountWebSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAccountWebSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateAccountWebSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAccountWebSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.CreateAccountWebSuccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.userid_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.userid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountWebSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 userID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountWebSuccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.CreateAccountWebSuccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required int64 userID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.CreateAccountWebSuccess)
  return target;
}

size_t CreateAccountWebSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthProtocol.CreateAccountWebSuccess)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required int64 requestID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_userid()) {
    // required int64 userID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
  }

  return total_size;
}
size_t CreateAccountWebSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.CreateAccountWebSuccess)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 requestID = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

    // required int64 userID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountWebSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAccountWebSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountWebSuccess::GetClassData() const { return &_class_data_; }


void CreateAccountWebSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAccountWebSuccess*>(&to_msg);
  auto& from = static_cast<const CreateAccountWebSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.CreateAccountWebSuccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountWebSuccess::CopyFrom(const CreateAccountWebSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.CreateAccountWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountWebSuccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateAccountWebSuccess::InternalSwap(CreateAccountWebSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAccountWebSuccess, _impl_.userid_)
      + sizeof(CreateAccountWebSuccess::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(CreateAccountWebSuccess, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountWebSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[1]);
}

// ===================================================================

class CreateAccountWebFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateAccountWebFailure>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CreateAccountWebFailure::CreateAccountWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.CreateAccountWebFailure)
}
CreateAccountWebFailure::CreateAccountWebFailure(const CreateAccountWebFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAccountWebFailure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fail_reason_){from._impl_.fail_reason_}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.CreateAccountWebFailure)
}

inline void CreateAccountWebFailure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fail_reason_){arena}
    , decltype(_impl_.requestid_){int64_t{0}}
  };
}

CreateAccountWebFailure::~CreateAccountWebFailure() {
  // @@protoc_insertion_point(destructor:AuthProtocol.CreateAccountWebFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAccountWebFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_reason_.~RepeatedField();
}

void CreateAccountWebFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAccountWebFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.CreateAccountWebFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_reason_.Clear();
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountWebFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AuthProtocol.CreateAccountWebFailure.reason Fail_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::AuthProtocol::CreateAccountWebFailure_reason_IsValid(val))) {
              _internal_add_fail_reason(static_cast<::AuthProtocol::CreateAccountWebFailure_reason>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_fail_reason(), ptr, ctx, ::AuthProtocol::CreateAccountWebFailure_reason_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAccountWebFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.CreateAccountWebFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // repeated .AuthProtocol.CreateAccountWebFailure.reason Fail_reason = 2;
  for (int i = 0, n = this->_internal_fail_reason_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_fail_reason(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.CreateAccountWebFailure)
  return target;
}

size_t CreateAccountWebFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.CreateAccountWebFailure)
  size_t total_size = 0;

  // required int64 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AuthProtocol.CreateAccountWebFailure.reason Fail_reason = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fail_reason_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_fail_reason(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAccountWebFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAccountWebFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAccountWebFailure::GetClassData() const { return &_class_data_; }


void CreateAccountWebFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAccountWebFailure*>(&to_msg);
  auto& from = static_cast<const CreateAccountWebFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.CreateAccountWebFailure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fail_reason_.MergeFrom(from._impl_.fail_reason_);
  if (from._internal_has_requestid()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAccountWebFailure::CopyFrom(const CreateAccountWebFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.CreateAccountWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountWebFailure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CreateAccountWebFailure::InternalSwap(CreateAccountWebFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.fail_reason_.InternalSwap(&other->_impl_.fail_reason_);
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountWebFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[2]);
}

// ===================================================================

class AuthenticateWeb::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateWeb>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AuthenticateWeb::AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.AuthenticateWeb)
}
AuthenticateWeb::AuthenticateWeb(const AuthenticateWeb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticateWeb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passwd()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.AuthenticateWeb)
}

inline void AuthenticateWeb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.requestid_){int64_t{0}}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthenticateWeb::~AuthenticateWeb() {
  // @@protoc_insertion_point(destructor:AuthProtocol.AuthenticateWeb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticateWeb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.passwd_.Destroy();
}

void AuthenticateWeb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticateWeb::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.AuthenticateWeb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.passwd_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateWeb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthProtocol.AuthenticateWeb.email");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthProtocol.AuthenticateWeb.passwd");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthenticateWeb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.AuthenticateWeb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthProtocol.AuthenticateWeb.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string passwd = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthProtocol.AuthenticateWeb.passwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.AuthenticateWeb)
  return target;
}

size_t AuthenticateWeb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthProtocol.AuthenticateWeb)
  size_t total_size = 0;

  if (_internal_has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (_internal_has_passwd()) {
    // required string passwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  if (_internal_has_requestid()) {
    // required int64 requestId = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  return total_size;
}
size_t AuthenticateWeb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.AuthenticateWeb)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string passwd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());

    // required int64 requestId = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateWeb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticateWeb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateWeb::GetClassData() const { return &_class_data_; }


void AuthenticateWeb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticateWeb*>(&to_msg);
  auto& from = static_cast<const AuthenticateWeb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.AuthenticateWeb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email(from._internal_email());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_passwd(from._internal_passwd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateWeb::CopyFrom(const AuthenticateWeb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.AuthenticateWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWeb::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthenticateWeb::InternalSwap(AuthenticateWeb* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateWeb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[3]);
}

// ===================================================================

class AuthenticateWebSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateWebSuccess>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AuthenticateWebSuccess::AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.AuthenticateWebSuccess)
}
AuthenticateWebSuccess::AuthenticateWebSuccess(const AuthenticateWebSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticateWebSuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creationdate_){}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.userid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creationdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creationdate()) {
    _this->_impl_.creationdate_.Set(from._internal_creationdate(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.userid_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.userid_));
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.AuthenticateWebSuccess)
}

inline void AuthenticateWebSuccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creationdate_){}
    , decltype(_impl_.requestid_){int64_t{0}}
    , decltype(_impl_.userid_){int64_t{0}}
  };
  _impl_.creationdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creationdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthenticateWebSuccess::~AuthenticateWebSuccess() {
  // @@protoc_insertion_point(destructor:AuthProtocol.AuthenticateWebSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticateWebSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creationdate_.Destroy();
}

void AuthenticateWebSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticateWebSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.AuthenticateWebSuccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.creationdate_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.userid_) -
        reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.userid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateWebSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string creationDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_creationdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AuthProtocol.AuthenticateWebSuccess.creationDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthenticateWebSuccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.AuthenticateWebSuccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required int64 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_userid(), target);
  }

  // required string creationDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creationdate().data(), static_cast<int>(this->_internal_creationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AuthProtocol.AuthenticateWebSuccess.creationDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creationdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.AuthenticateWebSuccess)
  return target;
}

size_t AuthenticateWebSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthProtocol.AuthenticateWebSuccess)
  size_t total_size = 0;

  if (_internal_has_creationdate()) {
    // required string creationDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationdate());
  }

  if (_internal_has_requestid()) {
    // required int64 requestId = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_userid()) {
    // required int64 userId = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
  }

  return total_size;
}
size_t AuthenticateWebSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.AuthenticateWebSuccess)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string creationDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationdate());

    // required int64 requestId = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());

    // required int64 userId = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateWebSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticateWebSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateWebSuccess::GetClassData() const { return &_class_data_; }


void AuthenticateWebSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticateWebSuccess*>(&to_msg);
  auto& from = static_cast<const AuthenticateWebSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.AuthenticateWebSuccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_creationdate(from._internal_creationdate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requestid_ = from._impl_.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateWebSuccess::CopyFrom(const AuthenticateWebSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.AuthenticateWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWebSuccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthenticateWebSuccess::InternalSwap(AuthenticateWebSuccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creationdate_, lhs_arena,
      &other->_impl_.creationdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthenticateWebSuccess, _impl_.userid_)
      + sizeof(AuthenticateWebSuccess::_impl_.userid_)
      - PROTOBUF_FIELD_OFFSET(AuthenticateWebSuccess, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateWebSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[4]);
}

// ===================================================================

class AuthenticateWebFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateWebFailure>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AuthenticateWebFailure::AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AuthProtocol.AuthenticateWebFailure)
}
AuthenticateWebFailure::AuthenticateWebFailure(const AuthenticateWebFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticateWebFailure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fail_reason_){from._impl_.fail_reason_}
    , decltype(_impl_.requestid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.requestid_ = from._impl_.requestid_;
  // @@protoc_insertion_point(copy_constructor:AuthProtocol.AuthenticateWebFailure)
}

inline void AuthenticateWebFailure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fail_reason_){arena}
    , decltype(_impl_.requestid_){int64_t{0}}
  };
}

AuthenticateWebFailure::~AuthenticateWebFailure() {
  // @@protoc_insertion_point(destructor:AuthProtocol.AuthenticateWebFailure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticateWebFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fail_reason_.~RepeatedField();
}

void AuthenticateWebFailure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticateWebFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProtocol.AuthenticateWebFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fail_reason_.Clear();
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticateWebFailure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .AuthProtocol.AuthenticateWebFailure.reason Fail_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::AuthProtocol::AuthenticateWebFailure_reason_IsValid(val))) {
              _internal_add_fail_reason(static_cast<::AuthProtocol::AuthenticateWebFailure_reason>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_fail_reason(), ptr, ctx, ::AuthProtocol::AuthenticateWebFailure_reason_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthenticateWebFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthProtocol.AuthenticateWebFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requestid(), target);
  }

  // repeated .AuthProtocol.AuthenticateWebFailure.reason Fail_reason = 2;
  for (int i = 0, n = this->_internal_fail_reason_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_fail_reason(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthProtocol.AuthenticateWebFailure)
  return target;
}

size_t AuthenticateWebFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProtocol.AuthenticateWebFailure)
  size_t total_size = 0;

  // required int64 requestId = 1;
  if (_internal_has_requestid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requestid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AuthProtocol.AuthenticateWebFailure.reason Fail_reason = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fail_reason_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_fail_reason(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticateWebFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticateWebFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticateWebFailure::GetClassData() const { return &_class_data_; }


void AuthenticateWebFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticateWebFailure*>(&to_msg);
  auto& from = static_cast<const AuthenticateWebFailure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AuthProtocol.AuthenticateWebFailure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fail_reason_.MergeFrom(from._impl_.fail_reason_);
  if (from._internal_has_requestid()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticateWebFailure::CopyFrom(const AuthenticateWebFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProtocol.AuthenticateWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWebFailure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AuthenticateWebFailure::InternalSwap(AuthenticateWebFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.fail_reason_.InternalSwap(&other->_impl_.fail_reason_);
  swap(_impl_.requestid_, other->_impl_.requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateWebFailure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AuthProtocol_2eproto_getter, &descriptor_table_AuthProtocol_2eproto_once,
      file_level_metadata_AuthProtocol_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AuthProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AuthProtocol::CreateAccountWeb*
Arena::CreateMaybeMessage< ::AuthProtocol::CreateAccountWeb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::CreateAccountWeb >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthProtocol::CreateAccountWebSuccess*
Arena::CreateMaybeMessage< ::AuthProtocol::CreateAccountWebSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::CreateAccountWebSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthProtocol::CreateAccountWebFailure*
Arena::CreateMaybeMessage< ::AuthProtocol::CreateAccountWebFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::CreateAccountWebFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthProtocol::AuthenticateWeb*
Arena::CreateMaybeMessage< ::AuthProtocol::AuthenticateWeb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::AuthenticateWeb >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthProtocol::AuthenticateWebSuccess*
Arena::CreateMaybeMessage< ::AuthProtocol::AuthenticateWebSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::AuthenticateWebSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthProtocol::AuthenticateWebFailure*
Arena::CreateMaybeMessage< ::AuthProtocol::AuthenticateWebFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AuthProtocol::AuthenticateWebFailure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
